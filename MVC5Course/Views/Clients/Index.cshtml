@model IEnumerable<MVC5Course.Models.Client>
@using PagedList
@using PagedList.Mvc
@{
    //var data = Model as PagedList  這樣寫不行 PagedList是命名空間，卻被當成類型使用
    var data = Model as IPagedList;

    ViewBag.Title = "Index";

    var CommonAjaxOptions = new AjaxOptions()
    {
        UpdateTargetId = "Details",
        LoadingElementId = "loading",
        OnSuccess = "ajaxSuccess"
    };
}
@if (TempData["Msg"] != null)
{
    <script>
        //下面被Encode過的，才會正確跳出訊息
        alert('@Ajax.JavaScriptStringEncode(Convert.ToString(TempData["Msg"]))');
        //alert('Convert.ToString(TempData["Msg"])'); 原文不動輸出
    </script>
}

@section Scripts {
    <script>
        function ajaxSuccess() {
            console.log('Succeed');
        }
    </script>
}
<h2>Index</h2>

<p>
    @*@Html.ActionLink("Create New", "Create")*@
    @*@Ajax.ActionLink("Create New", "Create", new AjaxOptions { UpdateTargetId = "Details" })*@ 
    @Ajax.ActionLink("Create New", "Create", CommonAjaxOptions)
    <img id="loading" src="~/Content/ajax-loader.gif" style="display: none" />	
</p>
@Html.PagedListPager(list: data, generatePageUrl: p => Url.Action("Index", new { pageno = p }) ,  options:PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing("Main"))
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.MiddleName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Gender)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DateOfBirth)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreditRating)
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.XCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TelephoneNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Street1)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Street2)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ZipCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Longitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Latitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Notes)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Occupation.OccupationName)
        </th>*@
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MiddleName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Gender)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DateOfBirth, "ShortDate")
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreditRating, "CreditRating")
        </td>
        @*<td>
            @Html.DisplayFor(modelItem => item.XCode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.TelephoneNumber)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Street1)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Street2)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.City)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ZipCode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Longitude)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Latitude)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Notes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Occupation.OccupationName)
        </td>*@
        <td>
            @*@Html.ActionLink("Edit", "Edit", new { id=item.ClientId }) |
            @Html.ActionLink("Details", "Details", new { id=item.ClientId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ClientId })
            *@
            @*@Ajax.ActionLink("Edit", "Edit", new { id = item.ClientId }, new AjaxOptions { UpdateTargetId = "Details" }) |*@
            @Ajax.ActionLink("Edit", "Edit", new
        {
            id = item.ClientId,
            pageno = (int)ViewBag.pageno
        },
                  CommonAjaxOptions)|
            @Ajax.ActionLink("Details", "Details", new { id = item.ClientId }, new AjaxOptions { UpdateTargetId = "Details" }) |
            @Ajax.ActionLink("Delete", "Delete", new { id = item.ClientId }, new AjaxOptions { UpdateTargetId = "Details" }) |

        </td>
    </tr>
}

</table>


@*@Html.PagedListPager(list: data, generatePageUrl: p => Url.Action("Index", new { pageno = p}))*@
@Html.PagedListPager(list: data, generatePageUrl: p => Url.Action("Index", new { pageno = p }), options: PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing("Main"))

<div id="Details"></div>




